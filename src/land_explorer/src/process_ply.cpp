#include <cstdio>
#include <map>
#include <tuple>

struct xyzrgbi_t
{
  float x;
  float y;
  float z;
  uint8_t r;
  uint8_t g;
  uint8_t b;
  float i;
} __attribute__((packed));

constexpr float resolution = 0.05f;
constexpr size_t bufsz = 1 << 20;

std::map<std::tuple<int, int, int>, uint32_t> map;

xyzrgbi_t data[bufsz];

int main(int argc, char **argv)
{
  const char *input, *output;
  if (argc > 3) {
    printf("ERROR:  Unknow command parameters.\n");
    printf("Usage: %s [input_filename [output_filename]]\n", argv[0]);
    return 1;
  }
  if (argc >= 2)
    printf("INFO: Change input filename to '%s'.\n", input = argv[1]);
  else
    printf("INFO: Default input filename is '%s'.\n", input = "subset.bag_points.ply");
  if (argc >= 3)
    printf("INFO: Change output filename to '%s'.\n", output = argv[2]);
  else
    printf("INFO: Default output filename is '%s'.\n", output = "result.ply");
  puts("");

  FILE *fp = fopen(input, "r");
  if (!fp) {
    printf("ERROR: Cannot open input file.\n");
    return 1;
  }

  int total = 0;
  int check = 0;
  fscanf(fp, "ply\n"
             "format binary_little_endian 1.0\n"
             "comment generated by Cartographer\n"
             "element vertex %d\n"
             "property float x\n"
             "property float y\n"
             "property float z\n"
             "property uchar red\n"
             "property uchar green\n"
             "property uchar blue\n"
             "property float intensity\n"
             "end_header\n%n", &total, &check);
  if (!check) {
    printf("ERROR: The format of input file is not supported.\n");
    return 1;
  }

  for (int i = 0;i < total;++i)
  {
    if (!(i & (bufsz - 1))) {
      fread(data, std::min(bufsz, size_t(total - i)), sizeof(data[0]), fp);
      printf("Processed %d of %d points, got %d useful points.\n", int(i), int(total), int(map.size()));
    }
    xyzrgbi_t &now = data[i & (bufsz - 1)];
    map[std::make_tuple(int(now.x / resolution), int(now.y / resolution), int(now.z / resolution))] =
                        uint32_t(now.r) | (uint32_t(now.g) << 8) | (uint32_t(now.b) << 16);
  }

  fclose(fp);

  fp = fopen(output, "w");
  if (!fp) {
    printf("ERROR: Cannot open output filename.\n");
    return 1;
  }

  fprintf(fp, "ply\n"
              "format ascii 1.0\n"
              "element vertex %d\n"
              "property float x\n"
              "property float y\n"
              "property float z\n"
              "property uchar red\n"
              "property uchar green\n"
              "property uchar blue\n"
              "end_header\n", int(map.size()));
  for (const auto &x : map)
  {
    float y[3];
    y[0] = std::get<0>(x.first) * resolution;
    y[1] = std::get<1>(x.first) * resolution;
    y[2] = std::get<2>(x.first) * resolution;
    fprintf(fp, "%.2f %.2f %.2f %d %d %d\n", y[0], y[1], y[2], x.second & 0xff, (x.second >> 8) & 0xff, (x.second >> 16) & 0xff);
  }
  fclose(fp);

  return 0;
}
